// TaskFlow Database Schema
// Comprehensive PostgreSQL schema for task management system
// Generated for production use with proper relationships, indexes, and constraints

generator client {
  provider        = "prisma-client-js"
  // Enable additional features for better performance
  previewFeatures = ["fullTextSearchPostgres", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

// ===== ENUMS =====

enum UserRole {
  SUPER_ADMIN
  ADMIN
  PROJECT_MANAGER
  TEAM_LEAD
  DEVELOPER
  VIEWER
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  GUEST
}

enum Permission {
  CREATE_PROJECT
  DELETE_PROJECT
  MANAGE_MEMBERS
  CREATE_TASK
  ASSIGN_TASK
  DELETE_TASK
  MANAGE_WORKSPACE
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectRole {
  OWNER
  MANAGER
  DEVELOPER
  REVIEWER
  VIEWER
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  TESTING
  DONE
  CANCELLED
}

enum TaskPriority {
  LOWEST
  LOW
  MEDIUM
  HIGH
  HIGHEST
}

enum TaskType {
  FEATURE
  BUG
  ENHANCEMENT
  RESEARCH
  DOCUMENTATION
  MAINTENANCE
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_OVERDUE
  COMMENT_ADDED
  MENTION
  PROJECT_INVITATION
  WORKSPACE_INVITATION
}

enum EntityType {
  TASK
  PROJECT
  WORKSPACE
  COMMENT
  USER
}

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  ASSIGN
  COMPLETE
  COMMENT
}

// ===== CORE MODELS =====

model User {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         String    @unique @db.VarChar(255)
  username      String    @unique @db.VarChar(50)
  firstName     String    @db.VarChar(100)
  lastName      String    @db.VarChar(100)
  avatar        String?   @db.Text
  role          UserRole  @default(DEVELOPER)
  passwordHash  String    @db.VarChar(255)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relationships
  ownedWorkspaces      Workspace[]
  workspaceMemberships WorkspaceMember[]
  ownedProjects        Project[]
  projectMemberships   ProjectMember[]
  createdTasks         Task[]              @relation("TaskCreator")
  assignedTasks        Task[]              @relation("TaskAssignee")
  taskAssignments      TaskAssignment[]
  taskStatusChanges    TaskStatusHistory[] @relation("TaskStatusHistoryChangedBy")
  comments             Comment[]
  attachments          Attachment[]
  timeLogs             TimeLog[]
  notifications        Notification[]
  activityLogs         ActivityLog[]

  @@index([email])
  @@index([username])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

model Workspace {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String    @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  description String?   @db.Text
  settings    Json      @default("{\"allowPublicProjects\":false,\"requireApprovalForTasks\":false,\"defaultTaskPriority\":\"MEDIUM\",\"timezone\":\"UTC\",\"workingDays\":[1,2,3,4,5]}")
  ownerId     String    @db.Uuid
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relationships
  owner    User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members  WorkspaceMember[]
  projects Project[]

  @@index([slug])
  @@index([ownerId])
  @@index([isActive])
  @@index([createdAt])
  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  workspaceId String        @db.Uuid
  userId      String        @db.Uuid
  role        WorkspaceRole
  permissions Permission[]
  joinedAt    DateTime      @default(now())
  invitedBy   String?       @db.Uuid
  isActive    Boolean       @default(true)

  // Relationships
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
  @@index([isActive])
  @@map("workspace_members")
}

model Project {
  id          String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String          @db.VarChar(200)
  slug        String          @db.VarChar(200)
  description String?         @db.Text
  color       String          @default("#6366f1") @db.VarChar(7)
  icon        String?         @db.VarChar(50)
  workspaceId String          @db.Uuid
  ownerId     String          @db.Uuid
  status      ProjectStatus   @default(PLANNING)
  priority    ProjectPriority @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  budget      Decimal?        @db.Decimal(12, 2)
  progress    Int             @default(0) @db.SmallInt
  isPublic    Boolean         @default(false)
  settings    Json            @default("{\"autoAssignTasks\":false,\"allowGuestComments\":false,\"requireTaskApproval\":false,\"enableTimeTracking\":true,\"defaultTaskType\":\"FEATURE\"}")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?

  // Relationships
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  owner       User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]
  comments    Comment[]
  attachments Attachment[]

  @@unique([workspaceId, slug])
  @@index([workspaceId])
  @@index([ownerId])
  @@index([status])
  @@index([priority])
  @@index([isPublic])
  @@index([createdAt])
  @@index([startDate])
  @@index([endDate])
  @@map("projects")
}

model ProjectMember {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  projectId  String      @db.Uuid
  userId     String      @db.Uuid
  role       ProjectRole
  joinedAt   DateTime    @default(now())
  hourlyRate Decimal?    @db.Decimal(8, 2)
  isActive   Boolean     @default(true)

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@index([isActive])
  @@map("project_members")
}

model Task {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title          String       @db.VarChar(300)
  description    String?      @db.Text
  projectId      String       @db.Uuid
  creatorId      String       @db.Uuid
  assigneeId     String?      @db.Uuid
  status         TaskStatus   @default(BACKLOG)
  priority       TaskPriority @default(MEDIUM)
  type           TaskType     @default(FEATURE)
  labels         String[]     @default([])
  estimatedHours Decimal?     @db.Decimal(6, 2)
  actualHours    Decimal?     @db.Decimal(6, 2)
  storyPoints    Int?         @db.SmallInt
  dueDate        DateTime?
  startDate      DateTime?
  completedAt    DateTime?
  parentTaskId   String?      @db.Uuid
  order          Int          @default(0)
  metadata       Json         @default("{\"blockedReason\":null,\"approvedBy\":null,\"reviewers\":[],\"externalLinks\":[],\"customFields\":{}}")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  // Relationships
  project       Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator       User                @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  assignee      User?               @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  parentTask    Task?               @relation("TaskHierarchy", fields: [parentTaskId], references: [id], onDelete: SetNull)
  subtasks      Task[]              @relation("TaskHierarchy")
  assignments   TaskAssignment[]
  statusHistory TaskStatusHistory[]
  comments      Comment[]
  attachments   Attachment[]
  timeLogs      TimeLog[]

  @@index([projectId])
  @@index([creatorId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([type])
  @@index([dueDate])
  @@index([createdAt])
  @@index([parentTaskId])
  @@index([labels], type: Gin)
  @@map("tasks")
}

model TaskStatusHistory {
  id         String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  taskId     String     @db.Uuid
  fromStatus TaskStatus
  toStatus   TaskStatus
  changedBy  String     @db.Uuid
  reason     String?    @db.Text
  createdAt  DateTime   @default(now())

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation("TaskStatusHistoryChangedBy", fields: [changedBy], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([changedBy])
  @@index([createdAt])
  @@map("task_status_history")
}

model TaskAssignment {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  taskId       String    @db.Uuid
  userId       String    @db.Uuid
  assignedBy   String    @db.Uuid
  assignedAt   DateTime  @default(now())
  unassignedAt DateTime?
  isActive     Boolean   @default(true)

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([assignedBy])
  @@index([isActive])
  @@index([assignedAt])
  @@map("task_assignments")
}

model Comment {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content         String    @db.Text
  taskId          String?   @db.Uuid
  projectId       String?   @db.Uuid
  authorId        String    @db.Uuid
  parentCommentId String?   @db.Uuid
  mentions        String[]  @default([])
  isEdited        Boolean   @default(false)
  editedAt        DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  // Relationships
  task          Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project       Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentComment Comment?     @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[]    @relation("CommentReplies")
  attachments   Attachment[]

  @@index([taskId])
  @@index([projectId])
  @@index([authorId])
  @@index([parentCommentId])
  @@index([createdAt])
  @@index([mentions], type: Gin)
  @@map("comments")
}

model Attachment {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  filename     String   @db.VarChar(255)
  originalName String   @db.VarChar(255)
  mimeType     String   @db.VarChar(100)
  size         BigInt
  url          String   @db.Text
  taskId       String?  @db.Uuid
  commentId    String?  @db.Uuid
  projectId    String?  @db.Uuid
  uploadedBy   String   @db.Uuid
  createdAt    DateTime @default(now())

  // Relationships
  task           Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  comment        Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  project        Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedByUser User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([commentId])
  @@index([projectId])
  @@index([uploadedBy])
  @@index([createdAt])
  @@index([mimeType])
  @@map("attachments")
}

model TimeLog {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  taskId      String   @db.Uuid
  userId      String   @db.Uuid
  description String?  @db.Text
  hours       Decimal  @db.Decimal(6, 2)
  date        DateTime @db.Date
  billable    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([date])
  @@index([billable])
  @@index([createdAt])
  @@map("time_logs")
}

model Notification {
  id         String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type       NotificationType
  title      String           @db.VarChar(200)
  message    String           @db.Text
  userId     String           @db.Uuid
  entityType EntityType
  entityId   String           @db.Uuid
  isRead     Boolean          @default(false)
  readAt     DateTime?
  createdAt  DateTime         @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
  @@map("notifications")
}

model ActivityLog {
  id         String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  action     ActivityAction
  entityType EntityType
  entityId   String         @db.Uuid
  userId     String         @db.Uuid
  metadata   Json           @default("{}")
  ipAddress  String?        @db.Inet
  userAgent  String?        @db.Text
  createdAt  DateTime       @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
  @@map("activity_logs")
}

// ===== VIEWS AND FUNCTIONS =====
// These would be implemented via raw SQL in migrations

// Indexes for full-text search
// CREATE INDEX CONCURRENTLY idx_tasks_search ON tasks USING gin(to_tsvector('english', title || ' ' || COALESCE(description, '')));
// CREATE INDEX CONCURRENTLY idx_projects_search ON projects USING gin(to_tsvector('english', name || ' ' || COALESCE(description, '')));
// CREATE INDEX CONCURRENTLY idx_comments_search ON comments USING gin(to_tsvector('english', content));
